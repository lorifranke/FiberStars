{"version":3,"sources":["ColorGenerator.js","components/toolbar/Toolbar.jsx","FSUtils.jsx","components/radial/Radial.jsx","components/statbox/StatBox.jsx","components/projectionview/ProjectionView.jsx","components/multiclusterview/MultiClusterView.jsx","components/loadpanel/LoadPanel.jsx","components/fibers3d/Fibers3d.jsx","components/splitscreen/SplitScreenView.jsx","Projections.jsx","App.jsx","index.jsx"],"names":["COLORS","COLORS2","ColorGenerator","getBackgroundColor","index","colors","randomColor","getBackgroundColor2","colors2","getColor","lightOrDark","getColor2","Math","floor","random","toString","reset","map","value","color","r","g","b","match","slice","replace","length","sqrt","getColorForAge","age","getColorForGender","gender","getColorForRace","race","toLowerCase","includes","this","getInstance","INSTANCE","Toolbar","props","render","className","icon","faBrain","Autocomplete","multiple","small","id","options","SUBJECTS","renderOption","option","Chip","size","style","background","colorGenerator","indexOf","label","defaultValue","subjects","onChange","e","reason","onSubjectsChanged","renderTags","getTagProps","width","renderInput","params","TextField","faUsers","variant","placeholder","CLUSTERS","clusters","onClustersChanged","FormControl","display","FormControlLabel","control","Switch","defaultChecked","threeDView","onThreeDViewChanged","colNames","projectionAttributes","onProjectionAttributesChanged","faBalanceScale","InputLabel","shrink","faPalette","Select","labelId","projectionColoring","onProjectionColoringChanged","target","PROJECTION_COLORING","MenuItem","getOptionLabel","colorArray","onColorArrayChanged","faPaintBrush","window","vtk","Rendering","Core","vtkColorTransferFunction","vtkColorMaps","rgbPresetNames","colorMap","onColorMapChanged","faArrowsAlt","Checkbox","sync3dViews","labelPlacement","onSync3dViews","faBars","rowMode","onRowModeChanged","React","Component","PROJECTIONS","DISTANCES","FSUtils","load","subject","cluster","successCallback","errorCallback","reader","IO","XML","vtkXMLPolyDataReader","newInstance","setUrl","getDataPath","then","polydata","getOutputData","data","lines","colMinima","colMaxima","numPoints","cellNames","cellMinima","cellMaxima","totalFiberSimilarity","measuredFiberSimilarity","i","getPointData","getNumberOfArrays","name","getArrayName","push","celldata","getCellData","getArrays","getData","getNumberOfPoints","ls","getLines","cs","getPoints","num_points","line","point","x","y","z","Array","k","getRange","error","subj","format","loadMetadata","metadata","Papa","parse","download","complete","results","row","subjectMetadata","subjectId","height","weight","wrapAndComputeStatistics","raw_data","col_names","num_cols","result","variance","mean","count","std","mean_plus_std","mean_minus_std","meanTotalFiberSimilarity","meanMeasuredFiberSimilarity","meanLineLength","j","Number","isNaN","sum","f","updateExtrema","dataset","min","max","MAX_VALUE","MIN_VALUE","Object","keys","round","decimals","standardize","featureVectors","num_components","means","stdevs","pow","rangeZeroTo","end","range","start","nums","normalize","coordinates","D","fillArray","d","longestLength","N","n","Radial","crad","ccx","ccy","cx","cy","stroke","fill","angle","PI","uv","endpoint","axisElements","axis","x1","y1","x2","y2","strokeWidth","strokeDasharray","labelParts","elementLength","axisLabel","fontSize","fontFamily","textAnchor","dx","dy","element","t","d1","d2","t1","t2","tick","drawLine","values","draw_label","path","d3","svgElements","moveTo","lineTo","zero","closePath","mask","cos","sin","StatBox","Tooltip","disableHoverListener","compact","title","lineHeight","Badge","faUser","update","prevProps","prevState","snapshot","ProjectionView","pointLocations","toolbarWidth","node","getBoundingClientRect","canvasWidth","innerWidth","canvasHeight","innerHeight","onMouseDown","setState","dragging","ox","pageX","oy","pageY","onMouseMove","state","selectedClusters","onMouseUp","onClustersSelected","abs","layout","points","colorBy","canvasPadding","radius","fillOpacity","onClick","remove","cursor","MultiClusterView","classes","root","sIdx","Grid","container","spacing","cIdx","renderView","item","xs","makeStyles","theme","flexGrow","LoadPanel","componentDidMount","Typography","text","CircularProgress","Fibers3d","canvasId","what","renderWindow","vtkRenderWindow","renderer","vtkRenderer","camera","vtkCamera","setActiveCamera","addRenderer","document","getElementById","innerHTML","Error","rect","openGLRenderWindow","OpenGL","setContainer","setSize","addView","interactor","vtkRenderWindowInteractor","setInteractorStyle","Interaction","Style","vtkInteractorStyleTrackballCamera","setView","initialize","bindEvents","actor","vtkActor","loadAndRenderFibers","onModified","cameraListeners","listener","getPosition","getFocalPoint","getViewUp","getClippingRange","that","lookupTable","preset","getPresetByName","setVectorModeToMagnitude","applyColorMap","setMappingRange","updateRange","mapper","vtkMapper","setInputData","setLookupTable","setUseLookupTableScalarRange","setColorByArrayName","setColorModeToMapScalars","setInterpolateScalarsBeforeMapping","setScalarModeToUsePointFieldData","setScalarVisibility","setMapper","addActor","resetCamera","pop","position","focalPoint","viewUp","clippingRange","setPosition","setFocalPoint","setViewUp","setClippingRange","BRAIN_OBJ_FILE","SplitScreenView","fibers3dComponents","sIndex","cIndex","Col","ref","class","broadcastCameraMovement","key","clearCameraListeners","registerCameraListener","keyOther","setCamera","Projections","mdssgd","MDSSGD","project","pivotMDS","PivotMDS","tSNE","model","TSNE","dim","perplexity","earlyExaggeration","learningRate","nIter","metric","init","type","run","outputScaled","getOutputScaled","umap","embedding","UMAP","nNeighbors","fit","App","projection","setRowMode","setProjection","setProjectionColoring","setClusters","setSubjects","setSync3dViews","setThreeDView","setColorArray","setProjectionAttributes","console","log","setColorMap","total","progress","noSubjectsSelected","loading","computingLayout","layoutReady","Drawer","anchor","open","onProjectionChanged","Container","fluid","marginLeft","maxWidth","overflow","Row","noGutters","computeLayout","selectedAttributes","selectedAttribute","numCols","vector","ReactDOM"],"mappings":"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","file":"static/js/main.b379160d.chunk.js","sourcesContent":["\nconst COLORS = [\n    \"#8dd3c7\", \"#ffffb3\", \"#bebada\", \"#fb8072\", \"#80b1d3\", \"#fdb462\",\n    \"#b3de69\", \"#fccde5\", \"#d9d9d9\", \"#bc80bd\", \"#ccebc5\", \"#ffed6f\"\n];\n\nconst COLORS2 = [\n    \"#a6cee3\", \"#1f78b4\", \"#b2df8a\", \"#33a02c\", \"#fb9a99\", \"#e31a1c\",\n    \"#fdbf6f\", \"#ff7f00\", \"#cab2d6\", \"#6a3d9a\", \"#ffff99\", \"#b15928\"\n];\n\nlet INSTANCE = null;\n\nexport class ColorGenerator {\n\n    constructor() {\n        this.reset();\n    }\n\n    static getInstance = () => {\n        if(ColorGenerator.INSTANCE == null) {\n            ColorGenerator.INSTANCE = new ColorGenerator();\n        }\n        return ColorGenerator.INSTANCE;\n    };\n\n    getBackgroundColor = (index) => {\n        if (!this.colors[index]) {\n            this.colors[index] = this.randomColor();\n        }\n        return this.colors[index];\n    };\n\n    getBackgroundColor2 = (index) => {\n        if (!this.colors2[index]) {\n            this.colors2[index] = this.randomColor();\n        }\n        return this.colors2[index];\n    };\n\n    getColor = (index) => {\n        return this.lightOrDark(this.getBackgroundColor(index)) === \"light\" ? \"black\" : \"white\";\n    };\n\n    getColor2 = (index) => {\n        return this.lightOrDark(this.getBackgroundColor2(index)) === \"light\" ? \"black\" : \"white\";\n    };\n\n    randomColor = () => {\n        return '#' + Math.floor(Math.random() * 16777215).toString(16);\n    };\n\n    reset = () => {\n        this.colors = {};\n        COLORS.map((value, index) => {\n            this.colors[index] = value;\n        });\n        this.colors2 = {};\n        COLORS2.map((value, index) => {\n            this.colors2[index] = value;\n        });\n    };\n\n    lightOrDark = (color) => {\n        // Variables for red, green, blue values\n        var r, g, b, hsp;\n\n        // Check the format of the color, HEX or RGB?\n        if (color.match(/^rgb/)) {\n\n            // If HEX --> store the red, green, blue values in separate variables\n            color = color.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n\n            r = color[1];\n            g = color[2];\n            b = color[3];\n        } else {\n\n            // If RGB --> Convert it to HEX: http://gist.github.com/983661\n            color = +(\"0x\" + color.slice(1).replace(\n                color.length < 5 && /./g, '$&$&'));\n\n            r = color >> 16;\n            g = color >> 8 & 255;\n            b = color & 255;\n        }\n\n        // HSP (Highly Sensitive Poo) equation from http://alienryderflex.com/hsp.html\n        hsp = Math.sqrt(\n            0.299 * (r * r) +\n            0.587 * (g * g) +\n            0.114 * (b * b)\n        );\n\n        // Using the HSP value, determine whether the color is light or dark\n        if (hsp > 127.5) {\n\n            return 'light';\n        } else {\n\n            return 'dark';\n        }\n    };\n\n    getColorForAge = (age) => {\n        if (age === \"22\") {\n            return '#fdd0a2';\n        } else if (age === \"24\") {\n            return '#fdae6b';\n        } else if (age === \"25\") {\n            return '#fd8d3c';\n        } else if (age === \"31\") {\n            return '#e6550d';\n        } else if (age === \"35\") {\n            return '#a63603';\n        } else {\n            return '#000';\n        }\n    };\n\n    getColorForGender = (gender) => {\n        if (gender === \"F\") {\n            return '#e41a1c';\n        } else {\n            return '#377eb8';\n        }\n    };\n\n    getColorForRace = (race) => {\n        if (race.toLowerCase().includes(\"black\")) {\n            return '#66c2a5';\n        } else if(race.toLowerCase().includes(\"asian\")) {\n            return '#fc8d62';\n        } else if(race.toLowerCase().includes(\"white\")) {\n            return '#8da0cb';\n        }\n    }\n}\n","import React from \"react\";\nimport \"./toolbar.scss\";\n\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport Chip from '@material-ui/core/Chip';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Switch from '@material-ui/core/Switch';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { \n    faBrain, \n    faUsers, \n    faArrowsAlt,\n    faPaintBrush,\n    faPalette,\n    faBalanceScale,\n    faBars\n} from '@fortawesome/free-solid-svg-icons';\nimport {ColorGenerator} from \"../../ColorGenerator\";\n\nexport default class Toolbar extends React.Component {\n\n    //static CLUSTERS = [...Array(10).keys()].map((value, index) => {\n    //    // return \"cluster_\" + String(index + 1).padStart(5, '0');\n    //    return \"cluster_\" + String(Math.round(Math.random() * 800)).padStart(5, '0');\n    //});\n    static CLUSTERS = [\n        'cluster_00050', 'cluster_00100', 'cluster_00150', 'cluster_00200', 'cluster_00250', 'cluster_00300', 'cluster_00350',\n        'cluster_00400', 'cluster_00450', 'cluster_00500', 'cluster_00550', 'cluster_00600', 'cluster_00650', 'cluster_00700',\n        'cluster_00750', 'cluster_00800'\n    ];\n\n    static SUBJECTS = [ '101006', '107422', '136227', '162228', '204016'\n    ];\n    //[ '101', '103', '105', '106' , '107', '108', '109', '110', '201', '202', '204', '208', '210' ];\n    static PROJECTIONS = [\n        //{\n        //    id: 'mdssgd',\n        //    label: \"MDSSDG\"\n        //},\n        {\n            id: 'pivotmds',\n            label: \"PivotMDS\"\n        },\n        //{\n        //    id: 'tsne',\n        //    label: \"t-SNE\"\n        //},\n        //{\n        //    id: 'umap',\n        //    label: \"UMAP\"\n        //}\n    ];\n    static DISTANCES = [\n        {\n            id: 'euclidean',\n            label: \"Weighted Euclidean\"\n        }\n    ];\n    static PROJECTION_COLORING = [\n        {\n            id: 'subjects',\n            label: \"Color by subjects\"\n        },\n        {\n            id: 'clusters',\n            label: \"Color by clusters\"\n        },\n        {\n            id: 'age',\n            label: \"Color by subject age\"\n        },\n        {\n            id: 'gender',\n            label: \"Color by subject gender\"\n        },\n        {\n            id: 'race',\n            label: \"Color by subject ethnicity\"\n        }\n    ];\n\n\n    constructor(props) {\n        super(props);\n        this.colorGenerator = ColorGenerator.getInstance();\n    }\n\n    componentDidMount() {\n\n    }\n\n    render = function () {\n        return (\n            <div className={\"p-3\"}>\n                <div className=\"pt-2\">\n                    <h3 className=\"text-info m-0 p-0\">\n                        <FontAwesomeIcon icon={faBrain} className={\"text-secondary logo\"}/>&nbsp;\n                        FIBER\n                        <span className=\"text-success\">STARS</span>\n                    </h3>\n                </div>\n                {\n                    /*******************************\n                     * STANDARD CONTROLS\n                     ********************************/\n                }\n                <Autocomplete\n                    multiple={true}\n                    small={\"true\"}\n                    id=\"subjects=select\"\n                    className={\"mt-4\"}\n                    options={Toolbar.SUBJECTS}\n                    renderOption={\n                        (option) =>\n                            <Chip\n                                size=\"small\"\n                                style={{\n                                    background: this.colorGenerator.getBackgroundColor2(Toolbar.SUBJECTS.indexOf(option)),\n                                    color: this.colorGenerator.getColor2(Toolbar.SUBJECTS.indexOf(option))\n                                }}\n                                label={option}\n                            />\n                    }\n                    defaultValue={this.props.subjects}\n                    value={this.props.subjects}\n                    onChange={(e, value, reason) => {\n                        this.props.onSubjectsChanged(value)\n                    }}\n                    renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                            <Chip\n                                size=\"small\"\n                                style={{\n                                    background: this.colorGenerator.getBackgroundColor2(Toolbar.SUBJECTS.indexOf(option)),\n                                    color: this.colorGenerator.getColor2(Toolbar.SUBJECTS.indexOf(option))\n                                }}\n                                label={option} {...getTagProps({index})}\n                            />\n                        ))\n                    }\n                    style={{width: 240}}\n                    renderInput={params => (\n                        <TextField {...params} label={[<FontAwesomeIcon icon={faUsers}/>, \" Subjects\"]}\n                                   variant=\"standard\" placeholder=\"Search\"/>\n                    )}\n                />\n\n                <Autocomplete\n                    multiple={true}\n                    small={\"true\"}\n                    id=\"tracts-select\"\n                    className={\"mt-3\"}\n                    options={Toolbar.CLUSTERS}\n                    renderOption={\n                        (option) =>\n                            <Chip\n                                size=\"small\"\n                                style={{\n                                    background: this.colorGenerator.getBackgroundColor(Toolbar.CLUSTERS.indexOf(option)),\n                                    color: this.colorGenerator.getColor(Toolbar.CLUSTERS.indexOf(option))\n                                }}\n                                label={option.replace(\"cluster_\", \"\")}\n\n                            />\n                    }\n                    defaultValue={this.props.clusters}\n                    value={this.props.clusters}\n                    onChange={(e, value, reason) => {\n                        this.props.onClustersChanged(value)\n                    }}\n                    renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                            <Chip\n                                size=\"small\"\n                                style={{\n                                    background: this.colorGenerator.getBackgroundColor(Toolbar.CLUSTERS.indexOf(option)),\n                                    color: this.colorGenerator.getColor(Toolbar.CLUSTERS.indexOf(option))\n                                }}\n                                label={option.replace(\"cluster_\", \"\")} {...getTagProps({index})}\n                            />\n                        ))\n                    }\n                    style={{width: 240}}\n                    renderInput={params => (\n                        <TextField {...params} label={[<FontAwesomeIcon icon={faBrain}/>, \" Clusters\"]}\n                                   variant=\"standard\" placeholder=\"Search\"/>\n                    )}\n                />\n                {\n                    /********************************\n                     * 3-D TOGGLE CONTROL\n                     ********************************/\n                }\n                {\n                    this.props.clusters.length > 0 &&\n                    this.props.subjects.length > 0 &&\n                    <FormControl className={\"mt-3\"} style={{display: \"block\"}}>\n                        <FormControlLabel\n                            control={\n                                <Switch\n                                    defaultChecked={this.props.threeDView}\n                                    onChange={(e, value) => {\n                                        this.props.onThreeDViewChanged(value)\n                                    }}\n                                />\n                            }\n                            label=\"Show clusters in 3D\"\n                        />\n                    </FormControl>\n                }\n                {\n                    /*******************************\n                     * PROJECTION CONTROLS\n                     ********************************/\n                }\n                {/*\n                    this.props.clusters.length === 0 &&\n                    this.props.subjects.length > 0 &&\n                    <FormControl className={\"mt-3\"} style={{display: \"block\"}}>\n                        <InputLabel shrink id=\"projection-select-label\">\n                            <ScatterPlotIcon/> Projection technique\n                        </InputLabel>\n                        <Select\n                            labelId=\"projection-select-label\"\n                            id=\"projection-select\"\n                            value={this.props.projection}\n                            onChange={\n                                (e) => {\n                                    this.props.onProjectionChanged(e.target.value);\n                                }\n                            }\n                            style={{width: 240}}\n                        >\n                            {\n                                Toolbar.PROJECTIONS.map((value, index) => {\n                                    return (\n                                        <MenuItem value={value.id}>{value.label}</MenuItem>\n                                    );\n                                })\n                            }\n                        </Select>\n                    </FormControl>*/\n                }\n                {/*\n                    this.props.clusters.length === 0 &&\n                    this.props.subjects.length > 0 &&\n                    <FormControl className={\"mt-3\"} style={{display: \"block\"}} disabled>\n                        <InputLabel shrink id=\"distance-select-label\">\n                            <FontAwesomeIcon icon={faArrowsAltH}/> Distance measure\n                        </InputLabel>\n                        <Select\n                            labelId=\"distance-select-label\"\n                            id=\"distance-select\"\n                            value={\"euclidean\"}\n                            style={{width: 240}}\n                        >\n                            {\n                                Toolbar.DISTANCES.map((value, index) => {\n                                    return (\n                                        <MenuItem value={value.id}>{value.label}</MenuItem>\n                                    );\n                                })\n                            }\n                        </Select>\n                    </FormControl>*/\n                }\n                {\n                    this.props.clusters.length === 0 &&\n                    this.props.subjects.length > 0 &&\n                    <Autocomplete\n                        multiple={true}\n                        small={\"true\"}\n                        id=\"color-array-select\"\n                        className={\"mt-3\"}\n                        options={this.props.colNames}\n                        renderOption={\n                            (option) =>\n                                <Chip\n                                    size=\"small\"\n                                    label={option}\n                                />\n                        }\n                        defaultValue={this.props.projectionAttributes}\n                        value={this.props.projectionAttributes}\n                        onChange={(e, value) => {\n                            this.props.onProjectionAttributesChanged(value)\n                        }}\n                        renderTags={(value, getTagProps) =>\n                            value.map((option, index) => (\n                                <Chip\n                                    size=\"small\"\n                                    label={option} {...getTagProps({index})}\n                                />\n                            ))\n                        }\n                        style={{width: 240}}\n                        renderInput={params => (\n                            <TextField {...params}\n                                       label={[<FontAwesomeIcon icon={faBalanceScale}/>, \" Weight on\"]}\n                                       variant=\"standard\" placeholder=\"Search\"/>\n                        )}\n                    />\n                }\n                {\n                    this.props.clusters.length === 0 &&\n                    this.props.subjects.length > 0 &&\n                    <FormControl className={\"mt-3\"}>\n                        <InputLabel shrink id=\"projection-coloring-select-label\">\n                            <FontAwesomeIcon icon={faPalette}/> Coloring\n                        </InputLabel>\n                        <Select\n                            labelId=\"projection-coloring-select-label\"\n                            id=\"projection-coloring-select\"\n                            value={this.props.projectionColoring}\n                            onChange={\n                                (e) => {\n                                    this.props.onProjectionColoringChanged(e.target.value);\n                                }\n                            }\n                            style={{width: 240}}\n                        >\n                            {\n                                Toolbar.PROJECTION_COLORING.map((value, index) => {\n                                    return (\n                                        <MenuItem value={value.id}>{value.label}</MenuItem>\n                                    );\n                                })\n                            }\n                        </Select>\n                    </FormControl>\n                }\n                {\n                    /*******************************\n                     * 3D VIEW CONTROLS\n                     ********************************/\n                }\n                {\n                    this.props.clusters.length > 0 &&\n                    this.props.subjects.length > 0 &&\n                    this.props.threeDView &&\n                    <Autocomplete\n                        small={\"true\"}\n                        id=\"color-array-select\"\n                        className={\"mt-3\"}\n                        options={this.props.colNames}\n                        getOptionLabel={option => option}\n                        defaultValue={this.props.colorArray}\n                        value={this.props.colorArray}\n                        onChange={(e, value) => {\n                            this.props.onColorArrayChanged(value)\n                        }}\n                        style={{width: 240}}\n                        renderInput={params => (\n                            <TextField {...params}\n                                       label={[<FontAwesomeIcon icon={faPaintBrush}/>, \" Color by\"]}\n                                       variant=\"standard\" placeholder=\"Search\"/>\n                        )}\n                    />\n                }\n                {\n                    this.props.clusters.length > 0 &&\n                    this.props.subjects.length > 0 &&\n                    this.props.threeDView &&\n                    <Autocomplete\n                        small={\"true\"}\n                        id=\"color-map-select\"\n                        className={\"mt-3\"}\n                        options={window.vtk.Rendering.Core.vtkColorTransferFunction.vtkColorMaps.rgbPresetNames}\n                        getOptionLabel={option => option}\n                        defaultValue={this.props.colorMap}\n                        value={this.props.colorMap}\n                        onChange={(e, value) => {\n                            this.props.onColorMapChanged(value)\n                        }}\n                        style={{width: 240}}\n                        renderInput={params => (\n                            <TextField {...params}\n                                       label={[<FontAwesomeIcon icon={faPalette}/>, \" Color map\"]}\n                                       variant=\"standard\" placeholder=\"Search\"/>\n                        )}\n                    />\n                }\n                {\n                    this.props.clusters.length > 0 &&\n                    this.props.subjects.length > 0 &&\n                    this.props.threeDView &&\n                    <FormControl className={\"mt-3\"}>\n                        <InputLabel shrink><FontAwesomeIcon icon={faArrowsAlt}/> 3D Sync</InputLabel>\n                        <FormControlLabel\n                            control={<Checkbox defaultChecked={this.props.sync3dViews} color=\"primary\"/>}\n                            label=\"Synchronize views\"\n                            labelPlacement=\"end\"\n                            className={\"toolbarCheckbox\"}\n                            onChange={(e, value) => {\n                                this.props.onSync3dViews(value)\n                            }}\n                        />\n                    </FormControl>\n                }\n                {\n                    /********************************\n                     * MULTI CLUSTER VIEW CONTROLS\n                     ********************************/\n                }\n                {\n                    this.props.clusters.length > 0 &&\n                    this.props.subjects.length > 0 &&\n                    !this.props.threeDView &&\n                    <FormControl className={\"mt-3\"}>\n                        <InputLabel shrink id=\"rowMode-select-label\">\n                            <FontAwesomeIcon icon={faBars}/> Row mode\n                        </InputLabel>\n                        <Select\n                            labelId=\"rowMode-select-label\"\n                            id=\"rowMode-select\"\n                            value={this.props.rowMode}\n                            onChange={\n                                (e) => {\n                                    this.props.onRowModeChanged(e.target.value);\n                                }\n                            }\n                            style={{width: 240}}\n                        >\n                            <MenuItem value={\"subjects\"}>Subjects in rows</MenuItem>\n                            <MenuItem value={\"clusters\"}>Clusters in rows</MenuItem>\n                        </Select>\n                    </FormControl>\n                }\n            </div>\n        );\n    };\n}\n","import Papa from \"papaparse\";\n\nexport default class FSUtils {\n\n    static load = (subject, cluster, successCallback, errorCallback) => {\n        const reader = window.vtk.IO.XML.vtkXMLPolyDataReader.newInstance();\n        reader.setUrl(FSUtils.getDataPath(subject, cluster,'vtp')).then(() => {\n            const polydata = reader.getOutputData();\n            const data = {\n              lines: [],\n              colMinima: [],\n              colMaxima: [],\n              colNames: [],\n              numPoints: [],\n              cellNames: [],\n              cellMinima: [],\n              cellMaxima: [],\n              totalFiberSimilarity: [],\n              measuredFiberSimilarity: []\n            };\n            for (let i = 0; i < polydata.getPointData().getNumberOfArrays(); i++) {\n              const name = polydata.getPointData().getArrayName(i);\n              data.colNames.push(name);\n            }\n            const celldata = polydata.getCellData();\n            data.totalFiberSimilarity = celldata.getArrays()[3].getData();\n            data.measuredFiberSimilarity = celldata.getArrays()[4].getData();\n            for (let i = 0; i < celldata.getNumberOfArrays(); i++) {\n              const name = celldata.getArrayName(i);\n              data.cellNames.push(name);\n            }\n            data.numPoints = polydata.getNumberOfPoints();\n            const ls = polydata.getLines().getData();\n            const cs = polydata.getPoints().getData();\n            let num_points = 0;\n            let line = null;\n            for (let i = 0; i < ls.length; i++) {\n              if (i === num_points) {\n                if (line) {\n                  data.lines.push(line);\n                }\n                line = [];\n                num_points += ls[i] + 1;\n              } else {\n                const point = {\n                  x: cs[3 * ls[i]],\n                  y: cs[3 * ls[i] + 1],\n                  z: cs[3 * ls[i] + 2],\n                  value: new Array(data.colNames.length)\n                };\n                for (let k = 0; k < data.colNames.length; k++) {\n                  point.value[k] = polydata.getPointData().getArrays()[k].getData()[ls[i]];\n                }\n                line.push(point);\n              }\n            }\n            data.lines.push(line);\n            // load minima und maxima of point scalars\n            for (let k = 0; k < data.colNames.length; k++) {\n              data.colMinima.push(polydata.getPointData().getArrays()[k].getRange()[0]);\n              data.colMaxima.push(polydata.getPointData().getArrays()[k].getRange()[1]);\n            }\n            // load minima and maxima of cell arrays\n             for (let k = 0; k < data.cellNames.length; k++) {\n              data.cellMinima.push(polydata.getCellData().getArrays()[k].getRange()[0]);\n              data.cellMaxima.push(polydata.getCellData().getArrays()[k].getRange()[1]);\n            }\n            successCallback(data);\n        }, (error) => {\n            errorCallback(error);\n        })\n    };\n\n    static getDataPath = (subj, cluster, format) => {\n        return `data/${subj}/${cluster}.${format}`;\n        // return `data/${subj}/tracts_left_hemisphere/${cluster}.${format}`;\n    };\n\n    static loadMetadata = () => {\n        const metadata = {};\n        Papa.parse(\"data/subjects.csv\", {\n            download: true,\n            complete: function(results) {\n                for (let row of results.data) {\n                    let subjectMetadata = {\n                        subjectId: row[0],\n                        age: row[1],\n                        gender: row[2],\n                        race: row[3],\n                        height: row[4],\n                        weight: row[5]\n                    }\n                    metadata[row[0]] = subjectMetadata;\n                }\n            }\n        });\n        return metadata;\n    };\n\n    static wrapAndComputeStatistics = (raw_data, col_names) => {\n        let num_cols = col_names.length;\n        let result = {\n            raw_data: raw_data,\n            num_cols: num_cols,\n            variance: new Array(num_cols),\n            mean: new Array(num_cols),\n            count: new Array(num_cols),\n            std: new Array(num_cols),\n            mean_plus_std: new Array(num_cols),\n            mean_minus_std: new Array(num_cols),\n            col_names: col_names,\n            meanTotalFiberSimilarity: new Array(raw_data.totalFiberSimilarity.length),\n            meanMeasuredFiberSimilarity: new Array(raw_data.measuredFiberSimilarity.length),\n            meanLineLength: new Array(raw_data.lines.length)\n        };\n        // Calculate means per line and for all lines (for value see above)\n        for (let k = 0; k < num_cols; k++) {\n            result.mean[k] = 0;\n            result.count[k] = 0;\n            for (let j = 0; j < raw_data.lines.length; j++) {\n                let line = raw_data.lines[j];\n                if(line) {\n                    for (let i = 0; i < line.length; i++) {\n                        if (Number.isNaN(line[i].value[k])) {\n                            continue;\n                        }\n                        result.mean[k] += line[i].value[k];\n                        result.count[k]++;\n                    }\n                }\n            }\n            result.mean[k] /= result.count[k];\n        }\n        // compute standard deviation\n        for (let k = 0; k < num_cols; k++) {\n            result.variance[k] = 0;\n            for (let j = 0; j < raw_data.lines.length; j++) {\n                let line = raw_data.lines[j];\n                if(line) {\n                    for (let i = 0; i < line.length; i++) {\n                        if (Number.isNaN(line[i].value[k])) {\n                            continue;\n                        }\n                        result.variance[k] += (line[i].value[k] - result.mean[k]) ** 2;\n                    }\n                }\n            }\n            result.variance[k] /= result.count[k];\n            result.std[k] = Math.sqrt(result.variance[k]);\n            result.mean_plus_std[k] = result.mean[k] + result.std[k];\n            result.mean_minus_std[k] = result.mean[k] - result.std[k];\n        }\n        // Calculate mean for totalFiberSimilarity\n        let sum = 0;\n        let count = 0;\n        for (let f = 0; f < raw_data.totalFiberSimilarity.length; f++) {\n                if (Number.isNaN(raw_data.totalFiberSimilarity[f])) {\n                    continue;\n                }\n                sum += raw_data.totalFiberSimilarity[f];\n                count++;\n            }\n            result.meanTotalFiberSimilarity = sum / count;\n\n        // Calculate means for measuredFiberSimilarity\n        sum = 0;\n        count = 0;\n        for (let f = 0; f < raw_data.measuredFiberSimilarity.length; f++) {\n                if (Number.isNaN(raw_data.totalFiberSimilarity[f])) {\n                    continue;\n                }\n                sum += raw_data.measuredFiberSimilarity[f];\n                count++;\n            }\n            result.meanMeasuredFiberSimilarity = sum / count;\n\n         // Calculate mean Fiber length\n        result.meanLineLength = raw_data.numPoints /raw_data.lines.length;\n\n        return result;\n    };\n\n    static updateExtrema = (col_names, dataset) => {\n        let min = new Array(col_names.length);\n        let max = new Array(col_names.length);\n        for(let k = 0; k < col_names.length; k++) {\n            min[k] = Number.MAX_VALUE;\n            max[k] = Number.MIN_VALUE;\n        }\n        for(let key of Object.keys(dataset)) {\n            let data = dataset[key];\n            for(let k = 0; k < col_names.length; k++) {\n                min[k] = Math.min(min[k], data.raw_data.colMinima[k]);\n                max[k] = Math.max(max[k], data.raw_data.colMaxima[k]);\n            }\n        }\n        for(let key of Object.keys(dataset)) {\n            let data = dataset[key];\n            for(let k = 0; k < col_names.length; k++) {\n                data.raw_data.colMinima[k] = min[k];\n                data.raw_data.colMaxima[k] = max[k];\n          }\n        }\n    };\n\n    // round value to fixed number of decimals\n    static round = (value, decimals) => {\n      return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n    };\n\n    /**\n     * Compute z-Score on feature vectors.\n     *\n     * @param featureVectors\n     */\n    static standardize = (featureVectors) => {\n        let num_components = featureVectors[0].length;\n        // compute means\n        let means = new Array(num_components);\n        for(let k = 0; k < num_components; k++) {\n            means[k] = 0;\n            for(let i = 0; i < featureVectors.length; i++) {\n                means[k] += featureVectors[i][k];\n            }\n            means[k] /= featureVectors.length;\n        }\n        // compute standard deviations\n        let stdevs = new Array(num_components);\n        for(let k = 0; k < num_components; k++) {\n            stdevs[k] = 0;\n            for(let i = 0; i < featureVectors.length; i++) {\n                stdevs[k] += Math.pow(featureVectors[i][k] - means[k], 2);\n            }\n            stdevs[k] /= featureVectors.length;\n            stdevs[k] = Math.sqrt(stdevs[k]);\n        }\n        // compute z-Scores\n        for(let i = 0; i < featureVectors.length; i++) {\n            for(let k = 0; k < num_components; k++) {\n                featureVectors[i][k] = (featureVectors[i][k] - means[k]) / stdevs[k];\n            }\n        }\n\n        // sanity check\n        means = new Array(num_components);\n        for(let k = 0; k < num_components; k++) {\n            means[k] = 0;\n            for(let i = 0; i < featureVectors.length; i++) {\n                means[k] += featureVectors[i][k];\n            }\n            means[k] /= featureVectors.length;\n        }\n        // compute standard deviations\n        stdevs = new Array(num_components);\n        for(let k = 0; k < num_components; k++) {\n            stdevs[k] = 0;\n            for(let i = 0; i < featureVectors.length; i++) {\n                stdevs[k] += Math.pow(featureVectors[i][k] - means[k], 2);\n            }\n            stdevs[k] /= featureVectors.length;\n            stdevs[k] = Math.sqrt(stdevs[k]);\n        }\n    };\n\n    static rangeZeroTo = (end) => {\n        return FSUtils.range(0, end);\n    };\n\n    static range = (start, end) => {\n        let nums = [];\n        for (let i = start; i < end; i++) {\n            nums.push(i);\n        }\n        return nums;\n    };\n\n    static normalize = (coordinates) => {\n        let D = coordinates[0].length;\n        let min = FSUtils.fillArray(D, Number.MAX_VALUE);\n        let max = FSUtils.fillArray(D, Number.MIN_VALUE);\n        let x;\n        for (let i = 0; i < coordinates.length; i++) {\n            for (let d = 0; d < D; d++) {\n                x = coordinates[i][d];\n                if (x < min[d]) {\n                    min[d] = x;\n                }\n                if (x > max[d]) {\n                    max[d] = x;\n                }\n            }\n        }\n        let length, longestLength = 0;\n        for (let d = 0; d < D; d++) {\n            length = max[d] - min[d];\n            if (length > longestLength) {\n                longestLength = length;\n            }\n        }\n        for (let d = 0; d < D; d++) {\n            for (let i = 0; i < coordinates.length; i++) {\n                x = coordinates[i][d];\n                coordinates[i][d] = (x - min[d]) / longestLength;\n            }\n        }\n        return coordinates;\n    };\n\n    static fillArray = (N, value) => {\n        let result = [];\n        for (let n = 0; n < N; n++) {\n            result.push(value);\n        }\n        return result;\n    };\n}\n","import \"./Radial.scss\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\n\nimport FSUtils from \"../../FSUtils\";\n\nexport default class Radial extends React.Component {\n\n    render = function () {\n        let padding = 75;\n        this.crad = Number(this.props.crad);\n        this.ccx = this.crad / 2 + padding;\n        this.ccy = this.crad / 2 + padding;\n\n        let num_cols = this.props.data.col_names.length;\n\n        return (\n            <div className={\"radial\"}>\n                <svg width={this.crad * 2 + padding} height={this.crad * 2 + padding}>\n                    <circle\n                        className={\"main\"}\n                        cx={this.ccx}\n                        cy={this.ccy}\n                        r={this.crad}\n                        stroke={\"#2d2d2d\"}\n                        fill={\"#2d2d2d33\"}\n                    >\n                    </circle>\n                    <circle\n                        cx={this.ccx}\n                        cy={this.ccy}\n                        r={this.crad * .25}\n                        stroke={\"#474747\"}\n                        fill={\"none\"}\n                    />\n                    <circle\n                        cx={this.ccx}\n                        cy={this.ccy}\n                        r={this.crad * .5}\n                        stroke={\"#474747\"}\n                        fill={\"none\"}\n                    />\n                    <circle\n                        cx={this.ccx}\n                        cy={this.ccy}\n                        r={this.crad * .75}\n                        stroke={\"#474747\"}\n                        fill={\"none\"}\n                    />\n                    {\n                        FSUtils.rangeZeroTo(num_cols).map((k) => {\n                            const angle = -Math.PI / 2 + k * (Math.PI * 2 / num_cols);\n                            const uv = Radial.endpoint(this.crad, angle, this.ccx, this.ccy);\n                            let axisElements = [];\n                            // add axis\n                            let axis =\n                                <line\n                                    x1={this.ccx}\n                                    y1={this.ccy}\n                                    x2={uv[0]}\n                                    y2={uv[1]}\n                                    stroke={\"#474747\"}\n                                    strokeWidth={1}\n                                    strokeDasharray={1}\n                                />;\n                            axisElements.push(axis);\n\n                            // add axis label\n                            let labelParts = this.props.data.col_names[k].match(/([A-Z]?[^A-Z]*)/g).slice(0,-1);\n                            let elementLength = 0;\n                            let axisLabel =\n                                <text\n                                    className={\"legend\"}\n                                    fontSize={\"10px\"}\n                                    fontFamily={\"monospace\"}\n                                    // display={\"none\"}\n                                    textAnchor={\"middle\"}\n                                    fill={\"white\"}\n                                    stroke={\"0\"}\n                                    x={uv[0]}\n                                    dx={uv[0] > this.ccx && \"15px\"\n                                        || uv[0] < this.ccx && \"-15px\"}\n                                    y={uv[1]}\n                                    dy={uv[1] > this.ccy && \"10px\"\n                                        || uv[1] < this.ccy && \"-10px\"}\n                                >\n                                    {\n                                        labelParts.map((element) => {\n                                            if(elementLength <= 5 ) {\n                                                elementLength += element.length;\n                                                return (\n                                                    <tspan>{element}</tspan>\n                                                )\n                                            } else {\n                                                elementLength += element.length;\n                                                return (\n                                                    <tspan dx={-6.2 * (elementLength - element.length)} dy=\"10\">{element}</tspan>\n                                                )\n                                            }\n                                        })\n                                    }\n                                </text>;\n                            axisElements.push(axisLabel);\n\n                            // add ticks\n                            for (let t = 0.25; t < 1; t += 0.25) {\n                                const d1 = t + 0.0025;\n                                const d2 = t - 0.0025;\n                                const t1 = Radial.endpoint(d1 * this.crad, angle, this.ccx, this.ccy);\n                                const t2 = Radial.endpoint(d2 * this.crad, angle, this.ccx, this.ccy);\n                                let tick =\n                                    <line\n                                        x1={t1[0]}\n                                        y1={t1[1]}\n                                        x2={t2[0]}\n                                        y2={t2[1]}\n                                        stroke={\"#d1d1d1\"}\n                                        strokeWidth={7}\n                                    />;\n                                axisElements.push(tick);\n                            }\n                            return axisElements;\n                        })\n                    }\n                    <defs>\n                        <mask\n                            id={\"hole\"}\n                        >\n                            <rect\n                                width={\"100%\"}\n                                height={\"100%\"}\n                                fill={\"white\"}\n                            />\n                            {\n                                this.drawLine(this.props.data.mean_minus_std, 'mask',false)\n                            }\n                        </mask>\n                    </defs>\n                    {\n                        this.drawLine(this.props.data.mean, 'mean',false)\n                    }\n                    {\n                        this.drawLine(this.props.data.mean_plus_std,'std',   true)\n                    }\n                </svg>\n            </div>\n        );\n    };\n\n    // register mouse events\n        //d3.select(`#${this.props.canvasId}_circle`).on(\"mouseenter\", () => {\n        //    d3.select(`#${this.props.canvasId}`).selectAll(`text.legend`).style(\"display\", \"block\");\n        //});\n        //d3.select(`#${this.props.canvasId}_circle`).on(\"mouseleave\", () => {\n        //    d3.select(`#${this.props.canvasId}`).selectAll(`text.legend`).style(\"display\", \"none\");\n        //});\n\n    drawLine = (values, color, draw_label) => {\n        let path = d3.path();\n        let svgElements = [];\n        for (let k = 0; k < values.length; k++) {\n            // Draw line for std\n            const min = this.props.data.raw_data.colMinima[k];\n            const max = this.props.data.raw_data.colMaxima[k];\n            const a = values[k];\n            const d = (a - min) / (max - min);\n            const angle = -Math.PI / 2 + k * (Math.PI * 2 / values.length);\n            const uv = Radial.endpoint(d * this.crad, angle, this.ccx, this.ccy);\n            if (k === 0) {\n                path.moveTo(uv[0], uv[1]);\n            } else {\n                path.lineTo(uv[0], uv[1]);\n            }\n            if (draw_label) {\n                // Draw values / numbers on the axes\n                let zero = d3.format(\"0.3r\");\n                let label = <text\n                    fontSize={\"9px\"}\n                    fontFamily={\"Verdana\"}\n                    fill={\"white\"}\n                    textAnchor={\"middle\"}\n                    x={uv[0]}\n                    y={uv[1]}\n                >\n                    {\n                        zero(values[k])\n                    }\n                </text>;\n                svgElements.push(label);\n            }\n        }\n        path.closePath();\n        if (color === 'std') {\n            svgElements.push(\n                <path\n                    d={path}\n                    fill={\"#FF990066\"}\n                    mask={\"url(#hole)\"}\n                />\n            );\n        } else if (color === 'mean') {\n            svgElements.push(\n                <path\n                    d={path}\n                    stroke={\"orange\"}\n                    fill={\"none\"}\n                    strokeWidth={2}\n                />\n            );\n        } else if (color === 'mask') {\n            svgElements.push(\n                <path\n                    d={path}\n                    fill={\"black\"}\n                />\n            );\n        }\n        return svgElements;\n    };\n\n    // compute endpoint position\n    static endpoint = (r, angle, x, y) => {\n        const u = r * Math.cos(angle) + x;\n        const v = r * Math.sin(angle) + y;\n        return [u, v];\n    };\n}\n","import React from \"react\";\nimport \"./StatBox.scss\";\n\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\nimport Badge from 'react-bootstrap/Badge';\nimport { faUser, faBrain } from '@fortawesome/free-solid-svg-icons'\nimport {ColorGenerator} from \"../../ColorGenerator\";\nimport Toolbar from './../toolbar/Toolbar';\nimport FSUtils from '../../FSUtils';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n/* add min/max fiber length */\n\nexport default class StatBox extends React.Component {\n\n    componentDidMount() {\n        this.update();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.update();\n    }\n\n    render = function () {\n        if(this.props.data) {\n            return (\n                <div className=\"statbox\">\n                    {\n                    <table className={\"mt-1\"}>\n                        <thead>\n                            <tr>\n                                <th>\n                                    <h6>\n                                        <Tooltip\n                                            disableHoverListener={!this.props.compact}\n                                            title={\n                                                <table>\n                                                    <tr>\n                                                        <td>\n                                                            <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                                                Age\n                                                            </span><br/>\n                                                            <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                                                {this.props.metadata.age}\n                                                            </span>\n                                                        </td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>\n                                                            <span\n                                                                style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                                                    Gender\n                                                                </span><br/>\n                                                            <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                                                {this.props.metadata.gender}\n                                                            </span>\n                                                        </td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>\n                                                            <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                                                Height (inch):\n                                                            </span><br/>\n                                                            <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                                                {this.props.metadata.height}\n                                                            </span>\n                                                        </td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>\n                                                            <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                                                Weight (lbs)\n                                                            </span><br/>\n                                                            <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                                                {this.props.metadata.weight}\n                                                            </span>\n                                                        </td>\n                                                    </tr>\n                                                </table>\n                                            }\n                                        >\n                                            <Badge\n                                                style={{\n                                                    background: ColorGenerator.getInstance().getBackgroundColor2(Toolbar.SUBJECTS.indexOf(this.props.subject)),\n                                                    color: ColorGenerator.getInstance().getColor2(Toolbar.SUBJECTS.indexOf(this.props.subject))\n                                                }}>\n                                                <FontAwesomeIcon icon={faUser}/> {this.props.subject}\n                                            </Badge>\n                                        </Tooltip>\n                                    </h6>\n                                </th>\n                                <th>\n                                    <h6>\n                                        <Tooltip\n                                            disableHoverListener={!this.props.compact}\n                                            title={\n                                                <table>\n                                                    <tr>\n                                                        <td>\n                                                            <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                                                Mean Fiber Length\n                                                            </span><br/>\n                                                            <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                                                {FSUtils.round(this.props.data.meanLineLength, 3)}\n                                                            </span>\n                                                        </td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>\n                                                            <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                                                {this.props.data.raw_data.cellNames[3]}\n                                                            </span><br/>\n                                                            <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                                                {FSUtils.round(this.props.data.meanTotalFiberSimilarity, 3)}\n                                                            </span>\n                                                        </td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>\n                                                            <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                                                {this.props.data.raw_data.cellNames[4]}\n                                                            </span><br/>\n                                                            <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                                                {FSUtils.round(this.props.data.meanMeasuredFiberSimilarity, 3)}\n                                                            </span>\n                                                        </td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>\n                                                            <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                                                Number of Fibers\n                                                            </span><br/>\n                                                            <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                                                {this.props.data.raw_data.lines.length}\n                                                            </span>\n                                                        </td>\n                                                    </tr>\n                                                </table>\n                                            }\n                                        >\n                                            <Badge\n                                                style={{\n                                                    background: ColorGenerator.getInstance().getBackgroundColor(Toolbar.CLUSTERS.indexOf(this.props.cluster)),\n                                                    color: ColorGenerator.getInstance().getColor(Toolbar.CLUSTERS.indexOf(this.props.cluster))\n                                                }}>\n                                                <FontAwesomeIcon icon={faBrain}/> {this.props.cluster.replace(\"cluster_\", \"\")}\n                                            </Badge>\n                                        </Tooltip>\n                                    </h6>\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            !this.props.compact &&\n                            <tr>\n                                <td>\n                                    <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                        Age\n                                    </span><br/>\n                                    <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                        {this.props.metadata.age}\n                                    </span>\n                                </td>\n                                <td>\n                                    <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                        Mean Fiber Length\n                                    </span><br/>\n                                    <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                        {FSUtils.round(this.props.data.meanLineLength, 3)}\n                                    </span>\n                                </td>\n                            </tr>\n                        }\n                        {\n\n                            !this.props.compact &&\n                            <tr>\n                                <td>\n                            <span\n                                style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                        Gender\n                                    </span><br/>\n                                    <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                        {this.props.metadata.gender}\n                                    </span>\n                                </td>\n                                <td>\n                                    <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                        {this.props.data.raw_data.cellNames[3]}\n                                    </span><br/>\n                                    <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                        {FSUtils.round(this.props.data.meanTotalFiberSimilarity, 3)}\n                                    </span>\n                                </td>\n                            </tr>\n                        }\n                        {\n                            !this.props.compact &&\n                            <tr>\n                                <td>\n                                    <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                        Height (inch):\n                                    </span><br/>\n                                    <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                        {this.props.metadata.height}\n                                    </span>\n                                </td>\n                                <td>\n                                    <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                        {this.props.data.raw_data.cellNames[4]}\n                                    </span><br/>\n                                    <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                        {FSUtils.round(this.props.data.meanMeasuredFiberSimilarity, 3)}\n                                    </span>\n                                </td>\n                            </tr>\n                        }\n                        {\n                            !this.props.compact &&\n                            <tr>\n                                <td>\n                                    <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                        Weight (lbs)\n                                    </span><br/>\n                                    <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                        {this.props.metadata.weight}\n                                    </span>\n                                </td>\n                                <td>\n                                    <span style={{fontSize: \"10px\", color: \"#ccc\"}}>\n                                        Number of Fibers\n                                    </span><br/>\n                                    <span style={{fontSize: \"14px\", lineHeight: \"10px\"}}>\n                                        {this.props.data.raw_data.lines.length}\n                                    </span>\n                                </td>\n                            </tr>\n                        }\n                        </tbody>\n                    </table>\n                    }\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"statbox\">\n                    Loading...\n                </div>\n            )\n        }\n    };\n\n    update = () => {\n        // whatever needs to be updated after new cluster comes in here\n        // console.log(this.props.data);\n    };\n\n}\n","import React from \"react\";\nimport \"./projectionview.scss\";\nimport Toolbar from '../toolbar/Toolbar';\n\nimport * as d3 from \"d3\";\nimport {ColorGenerator} from \"../../ColorGenerator\";\nimport Radial from \"../radial/Radial\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport StatBox from \"../statbox/StatBox\";\n\nexport default class ProjectionView extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            radius: 5,\n            canvasPadding: 100,\n\n            dragging: false,\n            ox: null,\n            oy: null,\n            dx: null,\n            dy: null,\n            selectedClusters: {}\n        };\n    }\n\n    render = function () {\n        let pointLocations = [];\n        let toolbarWidth = d3.select(\".mainmenu\").node().getBoundingClientRect().width;\n        // compute canvas dimensions\n        const canvasWidth = window.innerWidth - toolbarWidth;\n        const canvasHeight = window.innerHeight;\n        return (\n            <svg\n                width={canvasWidth}\n                height={canvasHeight}\n                className=\"projection\"\n                onMouseDown={\n                    (e) => {\n                        this.setState({\n                            dragging: true,\n                            ox: e.pageX - toolbarWidth,\n                            oy: e.pageY,\n                            dx: e.pageX  - toolbarWidth,\n                            dy: e.pageY,\n                        });\n                    }\n                }\n                onMouseMove={\n                    (e) => {\n                        if(this.state.dragging) {\n                            this.state.selectedClusters = {};\n                            pointLocations.map((point, index) => {\n                                if (\n                                    point.x > Math.min(this.state.ox, this.state.dx) &&\n                                    point.x < Math.max(this.state.ox, this.state.dx) &&\n                                    point.y > Math.min(this.state.oy, this.state.dy) &&\n                                    point.y < Math.max(this.state.oy, this.state.dy)\n                                ) {\n                                    this.state.selectedClusters[point.cluster] = true;\n                                }\n                            });\n                            this.setState({\n                                dx: e.pageX - toolbarWidth,\n                                dy: e.pageY\n                            });\n                        }\n                    }\n                }\n                onMouseUp={\n                    (e) => {\n                        this.setState({\n                            dragging: false,\n                            ox: null,\n                            oy: null,\n                            dx: null,\n                            dy: null,\n                            selectedClusters: {}\n                        });\n                        let selectedClusters = [];\n                        Object.keys(this.state.selectedClusters).map((cluster, index) => {\n                            if(this.state.selectedClusters[cluster]) {\n                                selectedClusters.push(cluster);\n                            }\n                            return true;\n                        });\n                        if(selectedClusters.length > 0) {\n                            this.props.onClustersSelected(selectedClusters);\n                        }\n                    }\n                }\n            >\n                {\n                    this.state.dragging &&\n                    <rect\n                        x={Math.min(this.state.ox, this.state.dx)}\n                        y={Math.min(this.state.oy, this.state.dy)}\n                        width={Math.abs(this.state.dx - this.state.ox)}\n                        height={Math.abs(this.state.dy - this.state.oy)}\n                        fill={\"#4457ff33\"}\n                        stroke={\"#4457ff\"}\n                        strokeWidth={1}\n                    />\n                }\n                {\n                    this.props.subjects.map((subject, index) => {\n                        let coordinates = this.props.layout[subject];\n                        let dataset = this.props.data[subject];\n                        // render points\n                        let points = [];\n                        for (let i = 0; i < coordinates.length; i++) {\n                            let data = dataset[Toolbar.CLUSTERS[i]]; // X-REF-1 Ordered by Toolbar.CLUSTERS\n                            let cluster = Toolbar.CLUSTERS[i];\n\n                            let color;\n                            if(this.props.colorBy === \"subjects\") {\n                                color = ColorGenerator.getInstance().getBackgroundColor2(Toolbar.SUBJECTS.indexOf(subject));\n                            } else if (this.props.colorBy === \"clusters\") {\n                                color = ColorGenerator.getInstance().getBackgroundColor(Toolbar.CLUSTERS.indexOf(cluster));\n                            } else if (this.props.colorBy === \"age\") {\n                                let age = this.props.metadata[subject].age;\n                                color = ColorGenerator.getInstance().getColorForAge(age)\n                            } else if (this.props.colorBy === \"gender\") {\n                                let gender = this.props.metadata[subject].gender;\n                                color = ColorGenerator.getInstance().getColorForGender(gender)\n                            } else if (this.props.colorBy === \"race\") {\n                                let race = this.props.metadata[subject].race;\n                                color = ColorGenerator.getInstance().getColorForRace(race)\n                            }\n                            let cx = coordinates[i][0] * (canvasWidth - 2 * this.state.canvasPadding) + this.state.canvasPadding;\n                            let cy = coordinates[i][1] * (canvasHeight - 2 * this.state.canvasPadding) + this.state.canvasPadding;\n                            points.push(\n                                <Tooltip\n                                    style={{display: \"inline-block\"}}\n                                    title={\n                                        <div>\n                                            <StatBox\n                                                data={this.props.data[subject][cluster]}\n                                                metadata={this.props.metadata[subject]}\n                                                subject={subject}\n                                                cluster={cluster}\n                                            />\n                                            <Radial\n                                                crad={75}\n                                                data={this.props.data[subject][cluster]}\n                                            />\n                                        </div>\n                                    }\n                                >\n                                    <circle\n                                        className={\"point\"}\n                                        cx={cx}\n                                        cy={cy}\n                                        r={this.state.radius}\n                                        strokeWidth={1}\n                                        stroke={this.state.selectedClusters[cluster] ? \"#000\": \"#fff\"}\n                                        fill={color}\n                                        fillOpacity={Object.keys(this.state.selectedClusters).length === 0 ? 0.8 : this.state.selectedClusters[cluster] ? 0.8 : 0.2}\n                                        onClick={() => {\n                                            d3.select(\".projectionTooltip\").remove();\n                                            this.props.onClustersSelected([Toolbar.CLUSTERS[i]]);\n                                        }}\n                                        style={{cursor: \"pointer\"}}\n                                    />\n                                </Tooltip>\n                            );\n                            pointLocations.push({cluster: cluster, x: cx, y: cy});\n                        }\n                        return points;\n                    })\n                }\n            </svg>\n        );\n    };\n}\n","import React from \"react\";\nimport \"./multiclusterview.scss\";\nimport Radial from './../radial/Radial';\nimport StatBox from './../statbox/StatBox';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport default class MultiClusterView extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.classes = makeStyles(theme => ({\n          root: {\n            flexGrow: 1,\n          }\n        }));\n    }\n\n    render = function () {\n\n        return (\n            <div className={this.classes.root}>\n                {\n                    this.props.rowMode === \"subjects\" &&\n                    this.props.subjects.map((subject, sIdx) => {\n                        return (\n                            <Grid container spacing={0} className={\"multiClusterColumn\"}>\n                                {\n                                    this.props.clusters.map((cluster, cIdx) => {\n                                        return this.renderView(this.props.data, this.props.metadata, subject, cluster);\n                                    })\n                                }\n                            </Grid>\n                        )\n                    })\n                }\n                {\n                    this.props.rowMode === \"clusters\" &&\n                    this.props.clusters.map((cluster, cIdx) => {\n                        return (\n                            <Grid container spacing={0} className={\"multiClusterColumn\"}>\n                                {\n                                    this.props.subjects.map((subject, sIdx) => {\n                                        return this.renderView(this.props.data, this.props.metadata, subject, cluster);\n                                    })\n                                }\n                            </Grid>\n                        )\n                    })\n                }\n            </div>\n        );\n    };\n\n    renderView = (data, metadata, subject, cluster) => {\n        return (\n            <Grid item xs>\n                <div className=\"stat-box\">\n                    <StatBox\n                        data={data[subject][cluster]}\n                        metadata={metadata[subject]}\n                        subject={subject}\n                        cluster={cluster}\n                        compact={true}\n                    />\n                </div>\n                <div className=\"radial-box\">\n                    <Radial\n                        crad={75}\n                        data={data[subject][cluster]}\n                    />\n                </div>\n            </Grid>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./loadpanel.scss\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\n\nexport default class LoadPanel extends React.Component {\n\n    componentDidMount = () => {\n        this.update();\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.update();\n    }\n\n    render = function () {\n        return (\n            <div className=\"loadpanel\">\n                <Typography>{this.props.text}</Typography>\n                <CircularProgress variant=\"static\" value={this.props.value}\n                />\n            </div>\n        );\n    };\n\n    update = () => {\n\n    };\n}\n","import React from \"react\";\nimport \"./Fibers3d.scss\";\nimport FSUtils from \"../../FSUtils\";\n\nexport default class Fibers3d extends React.Component {\n\n    static BRAIN_OBJ_FILE = \"meshmyfaceintoyours.obj\";\n\n    constructor(props) {\n        super(props);\n        this.cameraListeners = [];\n    }\n\n    componentDidMount = () => {\n        this.update();\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.update();\n    }\n\n    render = function () {\n        return (\n            <div className=\"fibers3d border-right border-left border-dark\">\n                <div id={this.props.canvasId} className={\"canvas\"}></div>\n            </div>\n        );\n    };\n\n    update = () => {\n        const what = FSUtils.getDataPath(this.props.subject, this.props.cluster, 'vtp');\n        const renderWindow = window.vtk.Rendering.Core.vtkRenderWindow.newInstance();\n        const renderer = window.vtk.Rendering.Core.vtkRenderer.newInstance();\n        this.camera = window.vtk.Rendering.Core.vtkCamera.newInstance();\n        renderer.setActiveCamera(this.camera);\n        renderWindow.addRenderer(renderer);\n\n        const container = document.getElementById(this.props.canvasId);\n        container.innerHTML = \"\";\n        if (!container) {\n            throw Error(\"Container not found\");\n        }\n        const rect = container.getBoundingClientRect();\n\n        const openGLRenderWindow = window.vtk.Rendering.OpenGL.vtkRenderWindow.newInstance();\n        openGLRenderWindow.setContainer(container);\n        openGLRenderWindow.setSize(rect.width, rect.height);\n\n        renderWindow.addView(openGLRenderWindow);\n\n        const interactor = window.vtk.Rendering.Core.vtkRenderWindowInteractor.newInstance();\n        interactor.setInteractorStyle(window.vtk.Interaction.Style.vtkInteractorStyleTrackballCamera.newInstance());\n        interactor.setView(openGLRenderWindow);\n        interactor.initialize();\n        interactor.bindEvents(container);\n\n        const reader = window.vtk.IO.XML.vtkXMLPolyDataReader.newInstance();\n        const actor = window.vtk.Rendering.Core.vtkActor.newInstance();\n\n        // render fibers\n        this.loadAndRenderFibers(reader, renderer, renderWindow, actor, what);\n\n        /* render brain\n        const brain_reader = window.vtk.IO.Misc.vtkOBJReader.newInstance();\n        const brain_actor = window.vtk.Rendering.Core.vtkActor.newInstance();\n        this.loadAndRenderBrain(brain_reader, renderer, renderWindow, brain_actor); */\n\n        renderWindow.render();\n        this.renderWindow = renderWindow;\n\n        this.camera.onModified(() => {\n            for(let listener of this.cameraListeners) {\n                listener(this.camera.getPosition(), this.camera.getFocalPoint(), this.camera.getViewUp(), this.camera.getClippingRange());\n            }\n        });\n    };\n\n\n\n    loadAndRenderFibers = (reader, renderer, renderWindow, actor, what) => {\n        let that = this;\n        reader.setUrl(what).then( function () {\n\n            const polydata = reader.getOutputData();\n            // const arrayName = polydata.getPointData().getArrayName(0);\n            const activeArray = polydata.getPointData().getArrays()[0];\n            // const dataRange = activeArray.getRange();\n\n            const lookupTable = window.vtk.Rendering.Core.vtkColorTransferFunction.newInstance();\n            // const presetNames = window.vtk.Rendering.Core.vtkColorTransferFunction.vtkColorMaps.rgbPresetNames;\n            const preset = window.vtk.Rendering.Core.vtkColorTransferFunction.vtkColorMaps.getPresetByName(that.props.colorMap);\n            lookupTable.setVectorModeToMagnitude();\n            lookupTable.applyColorMap(preset);\n            // lookupTable.setMappingRange(dataRange[0], dataRange[1]);\n            lookupTable.setMappingRange(that.props.min, that.props.max);\n            lookupTable.updateRange();\n\n            const mapper = window.vtk.Rendering.Core.vtkMapper.newInstance();\n            mapper.setInputData(polydata);\n            mapper.setLookupTable(lookupTable);\n            mapper.setUseLookupTableScalarRange(true);\n            mapper.setColorByArrayName(that.props.colorArray);\n            mapper.setColorModeToMapScalars();\n            mapper.setInterpolateScalarsBeforeMapping();\n            mapper.setScalarModeToUsePointFieldData();\n            mapper.setScalarVisibility(true);\n\n            actor.setMapper(mapper);\n\n            renderer.addActor(actor);\n\n            renderer.resetCamera();\n            renderWindow.render();\n        });\n    };\n\n/*\n    loadAndRenderBrain = (reader, renderer, renderWindow, actor) => {\n        reader.setUrl(Fibers3d.BRAIN_OBJ_FILE).then(function () {\n            const nbOutputs = reader.getNumberOfOutputPorts();\n            for (let idx = 0; idx < nbOutputs; idx++) {\n                const source = reader.getOutputData(idx);\n                const mapper = window.vtk.Rendering.Core.vtkMapper.newInstance();\n                actor.setMapper(mapper);\n                mapper.setInputData(source);\n                renderer.addActor(actor);\n            }\n            actor.setScale(30, 30, 30);\n            actor.setPosition(0, -100, 0); // use origin of reference system\n            actor.getProperty().setOpacity(0.1);\n\n            renderer.resetCamera();\n            renderWindow.render();\n        });\n    }; */\n\n    clearCameraListeners() {\n        while(this.cameraListeners.length > 0) {\n            this.cameraListeners.pop();\n        }\n    }\n\n    registerCameraListener(listener) {\n        this.cameraListeners.push(listener);\n    }\n\n    setCamera(position, focalPoint, viewUp, clippingRange) {\n        this.camera.setPosition(position[0], position[1], position[2]);\n        this.camera.setFocalPoint(focalPoint[0], focalPoint[1], focalPoint[2]);\n        this.camera.setViewUp(viewUp[0], viewUp[1], viewUp[2]);\n        this.camera.setClippingRange(clippingRange[0], clippingRange[1]);\n        this.renderWindow.render();\n    }\n}\n","import React from \"react\";\nimport \"./splitscreenview.scss\";\nimport Col from 'react-bootstrap/Col';\nimport Fibers3d from './../fibers3d/Fibers3d';\nimport Radial from './../radial/Radial';\nimport StatBox from './../statbox/StatBox';\n\nexport default class SplitScreenView extends React.Component {\n\n    componentDidMount = () => {\n        this.update();\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.update();\n    }\n\n    render = function () {\n        this.fibers3dComponents = {};\n        return (\n            this.props.subjects.map((subject, sIndex) => {\n                return (\n                    this.props.clusters.map((cluster, cIndex) => {\n                        return (\n                            <Col style={{width: 1 / (this.props.subjects.length * this.props.clusters.length) * 100 + \"%\"}}\n                                 className={\"splitScreenViewColumn\"}>\n                                <Fibers3d\n                                    ref={(ref) => {\n                                        // keep reference to this component\n                                        this.fibers3dComponents[\"f3d_\" + sIndex + \"_\" + cIndex] = ref\n                                    }}\n                                    canvasId={\"f3d_\" + sIndex + \"_\" + cIndex}\n                                    cluster={cluster}\n                                    subject={subject}\n                                    colorArray={this.props.colorArray}\n                                    colorMap={this.props.colorMap}\n                                    min={this.props.data[subject][cluster].raw_data.colMinima[this.props.data[subject][cluster].col_names.indexOf(this.props.colorArray)]}\n                                    max={this.props.data[subject][cluster].raw_data.colMaxima[this.props.data[subject][cluster].col_names.indexOf(this.props.colorArray)]}\n                                />\n                                <div class=\"radial-box\">\n                                    <Radial\n                                        crad={75}\n                                        data={this.props.data[subject][cluster]}\n                                    />\n                                </div>\n                                <div className=\"stat-box\">\n                                    <StatBox\n                                        data={this.props.data[subject][cluster]}\n                                        metadata={this.props.metadata[subject]}\n                                        subject={subject}\n                                        cluster={cluster}\n                                    />\n                                </div>\n                            </Col>\n                        )\n                    })\n                )\n            })\n        );\n    };\n\n    update = () => {\n        this.broadcastCameraMovement();\n    };\n\n    broadcastCameraMovement = () => {\n        // broadcast camera change from any any camera to all others\n        let keys = Object.keys(this.fibers3dComponents);\n        for(let key of keys) {\n            if(!this.fibers3dComponents[key]) continue;\n            this.fibers3dComponents[key].clearCameraListeners();\n            if(!this.props.sync3dViews) {\n                // continue, so listeners are not registered if user does not want to sync views\n                continue;\n            }\n            this.fibers3dComponents[key].registerCameraListener((position, focalPoint, viewUp, clippingRange) => {\n                for(let keyOther of keys) {\n                    if(keyOther === key) continue;\n                    if(!this.fibers3dComponents[keyOther]) continue;\n                    this.fibers3dComponents[keyOther].setCamera(position, focalPoint, viewUp, clippingRange);\n                }\n            });\n        }\n    };\n\n}\n","import {MDSSGD, PivotMDS} from \"hdsp2\";\nimport TSNE from \"tsne-js\";\nimport {UMAP} from \"umap-js\";\nimport FSUtils from \"./FSUtils\";\n\nexport default class Projections {\n\n    static mdssgd = (featureVectors) => {\n        FSUtils.standardize(featureVectors);\n        let layout = MDSSGD.project(featureVectors, 2);\n        layout = FSUtils.normalize(layout);\n        return layout;\n    };\n\n    static pivotMDS = (featureVectors) => {\n        FSUtils.standardize(featureVectors);\n        let layout = PivotMDS.project(featureVectors, 50, 2);\n        layout = FSUtils.normalize(layout);\n        return layout;\n    };\n\n    static tSNE = (featureVectors) => {\n        FSUtils.standardize(featureVectors);\n        let model = new TSNE({\n            dim: 2,\n            perplexity: 30.0,\n            earlyExaggeration: 4.0,\n            learningRate: 100.0,\n            nIter: 1000,\n            metric: 'euclidean'\n        });\n\n        model.init({\n            data: featureVectors,\n            type: 'dense'\n        });\n\n        model.run();\n\n        let outputScaled = model.getOutputScaled();\n        outputScaled = FSUtils.normalize(outputScaled);\n        return outputScaled;\n    };\n\n    static umap = (featureVectors) => {\n        FSUtils.standardize(featureVectors);\n        const umap = new UMAP({\n            nNeighbors: 4\n        });\n        let embedding = umap.fit(featureVectors);\n        embedding = FSUtils.normalize(embedding);\n        return embedding;\n    };\n}\n","import React from 'react';\nimport './scss/App.scss';\nimport Toolbar from './components/toolbar/Toolbar';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport FSUtils from \"./FSUtils\";\nimport ProjectionView from \"./components/projectionview/ProjectionView\";\nimport MultiClusterView from \"./components/multiclusterview/MultiClusterView\";\nimport LoadPanel from \"./components/loadpanel/LoadPanel\";\nimport SplitScreenView from \"./components/splitscreen/SplitScreenView\";\nimport Projections from \"./Projections\";\nimport Drawer from '@material-ui/core/Drawer';\n\n\nexport default class App extends React.Component {\n\n    state = {\n        // controller\n        clusters: [],\n        subjects: [],\n        sync3dViews: false,\n        threeDView: false,\n        projection: \"pivotmds\",\n        projectionColoring: \"subjects\",\n        rowMode: \"subjects\",\n\n        projectionAttributes: [],\n\n        data: {},\n        metadata: FSUtils.loadMetadata(),\n\n        layout: null,\n        colorArray: \"trace2\",\n        colorMap: \"rainbow\"\n    };\n\n    componentDidMount = () => {\n        this.update();\n    };\n\n    setRowMode = (rowMode) => {\n        this.state.rowMode = rowMode;\n        this.update();\n    };\n\n    setProjection = (projection) => {\n        this.state.projection = projection;\n        this.state.layout = null; // reset layout\n        this.update();\n    };\n\n    setProjectionColoring = (projectionColoring) => {\n        this.state.projectionColoring = projectionColoring;\n        this.update();\n    };\n\n    setClusters = (clusters) => {\n        this.state.clusters = clusters;\n        // this.state.layout = null; // reset layout\n        this.update();\n    };\n\n    setSubjects = (subjects) => {\n        this.state.subjects = subjects;\n        this.state.layout = null; // reset layout\n        this.update();\n    };\n\n    setSync3dViews = (sync3dViews) => {\n        this.state.sync3dViews = sync3dViews;\n        this.update();\n    };\n\n    setThreeDView = (threeDView) => {\n        this.state.threeDView = threeDView;\n        this.update();\n    };\n\n    setColorArray = (colorArray) => {\n        this.state.colorArray = colorArray;\n        this.update();\n    };\n\n    setProjectionAttributes = (projectionAttributes) => {\n        this.state.projectionAttributes = projectionAttributes;\n        this.state.layout = null; // reset layout\n        this.update();\n        console.log(this.state.projectionAttributes);\n    };\n\n    setColorMap= (colorMap) => {\n        this.state.colorMap = colorMap;\n        this.update();\n    };\n\n    render = () => {\n        // calculate loading progress\n        let total = this.state.subjects.length * Toolbar.CLUSTERS.length;\n        let progress = 0;\n        this.state.subjects.map((subject, index) => {\n            if (this.state.data[subject]) {\n                progress += Object.keys(this.state.data[subject]).length;\n            }\n        });\n        progress = Math.round(progress / total * 100);\n        let noSubjectsSelected = this.state.subjects.length === 0;\n        let loading = progress < 100;\n        let computingLayout = !noSubjectsSelected && !loading && Object.keys(this.state.layout).length === 0;\n        let layoutReady = !noSubjectsSelected && !loading && !computingLayout;\n        return (\n            [\n                <Drawer\n                    variant=\"persistent\"\n                    anchor=\"left\"\n                    open={true}\n                >\n                    <div className={\"mainmenu\"}>\n                        <Toolbar\n                            onClustersChanged={this.setClusters}\n                            onSubjectsChanged={this.setSubjects}\n                            onSync3dViews={this.setSync3dViews}\n                            onThreeDViewChanged={this.setThreeDView}\n                            onColorArrayChanged={this.setColorArray}\n                            onColorMapChanged={this.setColorMap}\n                            onProjectionChanged={this.setProjection}\n                            onProjectionColoringChanged={this.setProjectionColoring}\n                            onProjectionAttributesChanged={this.setProjectionAttributes}\n                            onRowModeChanged={this.setRowMode}\n                            clusters={this.state.clusters}\n                            subjects={this.state.subjects}\n                            projection={this.state.projection}\n                            projectionColoring={this.state.projectionColoring}\n                            sync3dViews={this.state.sync3dViews}\n                            threeDView={this.state.threeDView}\n                            colorArray={this.state.colorArray}\n                            rowMode={this.state.rowMode}\n                            projectionAttributes={this.state.projectionAttributes}\n                            colorMap={this.state.colorMap}\n                            colNames={\n                                (\n                                    // this.state.subjects.length > 0 &&\n                                    // this.state.clusters.length > 0 &&\n                                    this.state.data[this.state.subjects[0]] &&\n                                    this.state.data[this.state.subjects[0]][Toolbar.CLUSTERS[0]]\n                                ) ? this.state.data[this.state.subjects[0]][Toolbar.CLUSTERS[0]].col_names : []\n                            }\n                        />\n                    </div>\n                </Drawer>\n                ,\n                <Container fluid className={\"h-100 p-0\"}\n                           style={{marginLeft: \"274px\", maxWidth: \"calc(100% - 274px)\", overflow: \"scroll\"}}>\n                    {\n                        <Row className={\"h-100\"} noGutters={\"true\"}>\n                            {\n                                noSubjectsSelected &&\n                                <Col xs={12}>\n                                    <LoadPanel\n                                        value={0}\n                                        text={\"No subjects selected.\"}\n                                    />\n                                </Col>\n                            }\n                            {\n                                loading &&\n                                <Col xs={12}>\n                                    <LoadPanel\n                                        value={progress}\n                                        text={\"Loading, please wait...\"}\n                                    />\n                                </Col>\n                            }\n                            {\n                                computingLayout &&\n                                <Col xs={12}>\n                                    <LoadPanel\n                                        value={100}\n                                        text={\"Computing layout, please wait...\"}\n                                    />\n                                </Col>\n                            }\n                            {\n                                layoutReady && this.state.clusters.length === 0 &&\n                                <Col xs={12}>\n                                    <ProjectionView\n                                        subjects={this.state.subjects}\n                                        data={this.state.data}\n                                        metadata={this.state.metadata}\n                                        layout={this.state.layout}\n                                        onClustersSelected={this.setClusters}\n                                        colorBy={this.state.projectionColoring}\n                                    />\n                                </Col>\n                            }\n                            {\n                                progress === 100 && this.state.clusters.length > 0 && this.state.threeDView &&\n                                <SplitScreenView\n                                    subjects={this.state.subjects}\n                                    clusters={this.state.clusters}\n                                    sync3dViews={this.state.sync3dViews}\n                                    data={this.state.data}\n                                    metadata={this.state.metadata}\n                                    colorArray={this.state.colorArray}\n                                    colorMap={this.state.colorMap}\n                                />\n                            }\n                            {\n                                progress === 100 && this.state.clusters.length > 0 && !this.state.threeDView &&\n                                <MultiClusterView\n                                    data={this.state.data}\n                                    metadata={this.state.metadata}\n                                    subjects={this.state.subjects}\n                                    clusters={this.state.clusters}\n                                    rowMode={this.state.rowMode}\n                                />\n                            }\n                        </Row>\n                    }\n                </Container>\n            ]\n        );\n    };\n\n    update = () => {\n        for(let subject of this.state.subjects) {\n            if (!this.state.data[subject]) {\n                // init data set for new subject\n                this.state.data[subject] = {};\n            }\n            let dataset = this.state.data[subject];\n            if (Object.keys(dataset).length < Toolbar.CLUSTERS.length) {\n                // not all clusters are loaded yet\n                for (let cluster of Toolbar.CLUSTERS) {\n                    if (dataset[cluster]) {\n                        // this one was already loaded\n                        continue;\n                    }\n                    FSUtils.load(\n                        subject,\n                        cluster,\n\n                        (raw_data) => {\n                            console.log(\"Loaded cluster '\" + cluster + \"' of subject '\" + subject + \"'\");\n                            dataset[cluster] = FSUtils.wrapAndComputeStatistics(raw_data, raw_data.colNames);\n                            FSUtils.updateExtrema(raw_data.colNames, dataset);\n                            this.computeLayout(); // refresh layout (case when subject added)\n                            this.setState({});\n                        },\n                        (error) => {\n                            console.log(\"Could not load cluster '\" + cluster + \"' of subject '\" + subject + \"': \" + error);\n                            console.error(error);\n                        }\n                    );\n                }\n            }\n        }\n        this.computeLayout(); // refresh layout (case when subject removed)\n        this.setState({});\n    };\n\n    computeLayout= () => {\n        if(this.state.layout !== null) {\n            // layout has been computed already\n            return;\n        }\n        if(this.state.subjects.length === 0) {\n            // nothing to layout\n            return;\n        }\n        // only compute layout if all clusters are loaded for all selected subjects\n        for(let subject of this.state.subjects) {\n            let dataset = this.state.data[subject];\n            if (Object.keys(dataset).length !== Toolbar.CLUSTERS.length) {\n                return;\n            }\n        }\n        this.state.layout = {};\n        // attributes to take into account in distance measure\n        let selectedAttributes = null;\n        if(this.state.projectionAttributes.length > 0) {\n            // if any is selected, load index for each selected projection attribute\n            selectedAttributes = [];\n            let colNames = this.state.data[this.state.subjects[0]][Toolbar.CLUSTERS[0]].col_names;\n            for(let selectedAttribute of this.state.projectionAttributes) {\n                selectedAttributes.push(colNames.indexOf(selectedAttribute));\n            }\n        } else {\n            // take all attributes\n            let numCols = this.state.data[this.state.subjects[0]][Toolbar.CLUSTERS[0]].col_names.length;\n            selectedAttributes = FSUtils.rangeZeroTo(numCols);\n        }\n        // collect feature vectors\n        let featureVectors = [];\n        for(let subject of this.state.subjects) {\n            let dataset = this.state.data[subject];\n            if (!this.state.layout[subject]) {\n                Toolbar.CLUSTERS.map((cluster, index) => { // X-REF-1 Order by Toolbar.CLUSTERS\n                    let vector = [];\n                    for (let i = 0; i < dataset[cluster].num_cols; i++) {\n                        if(selectedAttributes.includes(i)) {\n                            vector.push(dataset[cluster].mean[i]);\n                            // vector[i] = dataset[cluster].std[i];\n                        }\n                    }\n                    featureVectors.push(vector);\n                });\n            }\n        }\n        // project layout\n        let layout;\n        switch(this.state.projection) {\n            case \"mdssgd\":\n                layout = Projections.mdssgd(featureVectors);\n                break;\n            case \"pivotmds\":\n                layout = Projections.pivotMDS(featureVectors);\n                break;\n            case \"tsne\":\n                layout = Projections.tSNE(featureVectors);\n                break;\n            case \"umap\":\n                layout = Projections.umap(featureVectors);\n                break;\n        }\n\n        // extract coordinates\n        this.state.subjects.map((subject, sIndex) => {\n            this.state.layout[subject] = layout.slice(sIndex * Toolbar.CLUSTERS.length, (sIndex+1) * Toolbar.CLUSTERS.length);\n        });\n    };\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './scss/index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}